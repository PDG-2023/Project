---
openapi: 3.0.0
info:
  title: StoreMe API
  version: "1"
servers:
  - url: http://localhost:8091
    description: Main API
tags:
  - name: Item
    description: Relates to items
  - name: ItemModel
    description: Relates to item models
  - name: Location
    description: Relates to locations
  - name: Movement
    description: Relates to movements
  - name: User
    description: Relates to users
  - name: Inventory
    description: Relates to inventories
  - name: Jwt
    description: Relates to JWT
paths:
  /authentication/getToken:
    post:
      tags:
        - Jwt
      summary: Get token
      description: Get a JWT token for a username and password.
      operationId: getToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CredentialsDTO"
      responses:
        "200":
          description: Operation successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /authentication/validateToken:
    post:
      tags:
        - Jwt
      summary: Validate token
      description: Verify that a token can be used.
      operationId: validateToken
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        "200":
          description: If the JWT is valid.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/inventory/{inventoryId}/categories":
    parameters:
      - in: path
        name: inventoryId
        schema:
          type: integer
        required: true
        description: Numeric of the current inventory
    get:
      tags:
        - Category
      description: Get categories
      operationId: getCategories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: [ ]
    post:
      tags:
        - Category
      description: Create category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: [ ]
  "/categories/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - Category
      description: Get category
      operationId: getCategory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - Category
      description: Update category
      operationId: updateCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - Category
      description: Delete category
      operationId: deleteCategory
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  /users:
    get:
      tags:
        - User
      description: Get users, supports the swagger-undocumented filter
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - User
      description: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
  /users/current-user:
    get:
      tags:
        - User
      description: Get current connected user
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
      security:
        - JWTAuth: []
  "/users/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - User
      description: Get user
      operationId: getUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - User
      description: Update user
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - User
      description: Delete user
      operationId: deleteUser
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/inventory/{inventoryId}/locations":
    parameters:
      - in: path
        name: inventoryId
        schema:
          type: integer
        required: true
        description: Numeric of the current inventory
    get:
      tags:
        - Location
      description: Get locations, supports the swagger-undocumented filter
      operationId: getLocations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - Location
      description: Create location
      operationId: createLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/locations/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - Location
      description: Get location
      operationId: getLocation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - Location
      description: Update location
      operationId: updateLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - Location
      description: Delete location
      operationId: deleteLocation
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  /items:
    get:
      tags:
        - Item
      description: Get items, supports the swagger-undocumented filter
      operationId: getItems
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - Item
      description: Create item
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/items/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - Item
      description: Get item
      operationId: getItem
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - Item
      description: Update item
      operationId: updateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - Item
      description: Delete item
      operationId: deleteItem
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  /inventories:
    get:
      tags:
        - Inventory
      description: Get inventories, supports the swagger-undocumented filter
      operationId: getInventories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - Inventory
      description: Create inventory
      operationId: createInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/inventories/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - Inventory
      description: Get inventory
      operationId: getInventory
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - Inventory
      description: Update inventory
      operationId: updateInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - Inventory
      description: Delete inventory
      operationId: deleteInventory
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  /movements:
    get:
      tags:
        - Movement
      description: Get movements, supports the swagger-undocumented filter
      operationId: getMovements
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MovementDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - Movement
      description: Create movement
      operationId: createMovement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovementDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovementDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/movements/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - Movement
      description: Get movement
      operationId: getMovement
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovementDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - Movement
      description: Delete movement
      operationId: deleteMovement
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovementDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/inventory/{inventoryId}/item-models":
    parameters:
      - in: path
        name: inventoryId
        schema:
          type: integer
        required: true
        description: Numeric of the current inventory
    get:
      tags:
        - ItemModel
      description: Get item models, supports the swagger-undocumented filter
      operationId: getItemModels
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemModelDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    post:
      tags:
        - ItemModel
      description: Create item model
      operationId: createItemModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemModelDTO"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemModelDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
  "/item-models/{id}":
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the resource to get
    get:
      tags:
        - ItemModel
      description: Get item model
      operationId: getItemModel
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemModelDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    put:
      tags:
        - ItemModel
      description: Update item model
      operationId: updateItemModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemModelDTO"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemModelDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
    delete:
      tags:
        - ItemModel
      description: Delete item model
      operationId: deleteItemModel
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemModelDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
        "500":
          $ref: "#/components/responses/500"
      security:
        - JWTAuth: []
components:
  schemas:
    JSONErrorMessage:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    CategoryDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.Category>
      required:
        - description
        - name
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        name:
          type: string
        parentCategoryId:
          type: integer
          nullable: true
    ItemModelDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.ItemModel>
      required:
        - description
        - name
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            type: integer
    LocationDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.Location>
      required:
        - description
        - name
        - parentLocationId
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        name:
          type: string
        description:
          type: string
        parentLocationId:
          type: integer
          nullable: true
    ItemDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.Item>
      required:
        - modelId
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        modelId:
          type: integer
    MovementDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.Movement>
      required:
        - locationId
        - itemId
        - movementType
      properties:
        id:
          type: integer
        created:
          type: string
        locationId:
          type: integer
        itemId:
          type: integer
        movementType:
          type: string
    UserDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.User>
      required:
        - email
        - firstName
        - lastName
        - username
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        ownedInventories:
          type: array
          items:
            type: integer
        sharedInventories:
          type: array
          items:
            type: integer
    InventoryDTO:
      x-implements:
        - ch.heig.pdg.backend.dto.IDataTransferObject<ch.heig.pdg.backend.entities.Inventory>
      required:
        - name
      properties:
        id:
          type: integer
        updated:
          type: string
        created:
          type: string
        name:
          type: string
        owner_id:
          type: integer
        users:
          type: array
          items:
            type: integer
    JWTDTO:
      type: object
      properties:
        token:
          type: string
    CredentialsDTO:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
    "401":
      description: No authorization was provided or token is invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
    "409":
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JSONErrorMessage"
